library(tidyverse)
library(cluster)
# Carregar e pré-processar os dados
df <- read.csv('retail_sales_dataset.csv')
df_scaled <- scale(df)
View(df)
# Treinar o modelo K-means
kmeans_model <- kmeans(df_scaled, centers=3)
df_scaled <- scale(df)
df$Gender <- ifelse(df$Gender == "Male", 1, 2)
View(df)
df <- cbind(df, df_onehot)
df <- cbind(df, df_onehot)
# Codificar a coluna "Gender"
df$Gender <- ifelse(df$Gender == "Male", 1, 2)
# Realizar codificação one-hot para "Product.Category"
df_onehot <- model.matrix(~Product.Category - 1, data=df)
# Combinar o dataframe original com as novas colunas
df <- cbind(df, df_onehot)
View(df_onehot)
# Mapear as categorias para números inteiros
mapping <- setNames(1:3, c("Beauty", "Clothing", "Electronics"))
df$Product.Category <- as.integer(revalue(df$Product.Category, mapping))
View(df)
View(df_onehot)
View(df)
install.packages("plyr")
library(plyr)
mapping <- setNames(1:3, c("Beauty", "Clothing", "Electronics"))
df$Product.Category <- as.integer(revalue(df$Product.Category, mapping))
df (names)
names (df)
library(dplyr)
df <- df %>%
mutate(Product.Category = recode(Product.Category,
"Beauty" = 1,
"Clothing" = 2,
"Electronics" = 3))
View(df)
View(df)
df <- read.csv('retail_sales_dataset.csv')
df_scaled <- scale(df)
View(df)
View(df)
View(df)
df$Gender <- ifelse(df$Gender == "Male", 1, 2)
View(df)
View(df)
df_onehot <- model.matrix(~Product.Category - 1, data=df)
df <- cbind(df, df_onehot)
View(df_onehot)
df_onehot <- model.matrix(~Product.Category - 1, data=df)
df_onehot <- model.matrix(~Product.Category - 1, data=df)
df <- cbind(df, df_onehot)
df <- cbind(df, df_onehot)
View(df)
# Carregar e pré-processar os dados
df <- read.csv('retail_sales_dataset.csv')
df_scaled <- scale(df)
# Codificar a coluna "Gender"
df$Gender <- ifelse(df$Gender == "Male", 1, 2)
library(dplyr)
df <- df %>%
mutate(Product.Category = recode(Product.Category,
"Beauty" = 1,
"Clothing" = 2,
"Electronics" = 3))
View(df)
names (df)
df <- df %>% select(-Customer.ID)
# Transformar Date para tipo Date e extrair características
df$Date <- as.Date(df$Date)
df$Year <- as.integer(format(df$Date, "%Y"))
df$Month <- as.integer(format(df$Date, "%m"))
df$Day <- as.integer(format(df$Date, "%d"))
# Remover coluna Date original
df <- df %>% select(-Date)
View(df)
head (df)
#Escalonar os dados
df_scaled <- scale(df_copy)
# Backup do dataframe
df_copy <- df
#Escalonar os dados
df_scaled <- scale(df_copy)
View(df_copy)
View(df_scaled)
head(df_copy)
View(df_scaled)
head (df_scaled)
wcss <- vector()
for (i in 1:10) {
kmeans_model <- kmeans(df_scaled, centers=i)
wcss[i] <- kmeans_model$tot.withinss
}
plot(1:10, wcss, type="b", xlab="Número de Clusters", ylab="WCSS")
View(kmeans_model)
View(kmeans_model)
plot(1:10, wcss, type="b", xlab="Número de Clusters", ylab="WCSS", main="Método do Cotovelo")
# Calcular a taxa de mudança da WCSS
delta_wcss <- diff(wcss)  # Diferenças entre cada par de pontos
# Calcular a taxa de mudança da taxa de mudança (segunda derivada)
delta_delta_wcss <- diff(delta_wcss)
# Encontrar o índice do "cotovelo" (o menor valor da segunda derivada)
elbow_index <- which.min(delta_delta_wcss)
# O número de clusters ótimo é um a mais do que o índice do cotovelo,
# porque estamos começando a contar a partir de 1 cluster
optimal_clusters <- elbow_index + 1
View(kmeans_model)
head (kmeans_model)
# Executando o algoritmo K-means com 8 clusters
final_kmeans_model <- kmeans(df_scaled, centers=8)
# Adicionando os rótulos dos clusters ao dataframe original
df$Cluster <- final_kmeans_model$cluster
# Ver os primeiros registros para confirmar
head(df)
View(final_kmeans_model)
